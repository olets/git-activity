#!/usr/bin/env bash

# git-activity
# https://github.com/olets/git-activity
# Copyright (Â©) 2017-present Henry Bley-Vroman


'builtin' 'export' GIT_ACTIVITY_LOG_FILE="${GIT_ACTIVITY_LOG_FILE:-${XDG_CONFIG_HOME:-$HOME/.config}/git-activity/git-activity.csv}"

__git_activity_check_dependencies() {
  local -a coreutils_dependencies dependencies
  local dependency
  local -i ret
  
  dependencies=(
    awk
    bash
    column
    git
    less
    man
  )

  coreutils_dependencies=(
    basename
    cat
    chmod
    dirname
    mkdir
    nl
    rm
    tac
    touch
    wc
  )

  # additional dependencies with special requirements: GNU date

  ret=0

  for dependency in "${dependencies[@]}"; do
    if ! 'command' -v "$dependency" &>/dev/null; then
      ret=1
      'builtin' 'printf' "Missing dependency \`%s\`. Installation method differs by OS.\\n"
    fi
  done

  for dependency in "${coreutils_dependencies[@]}"; do
    if ! 'command' -v "$dependency" &>/dev/null; then
      ret=1
      'builtin' 'printf' "Missing dependency \`%s\`. Install \`coreutils\`. Installation method differs by OS.\\n"
    fi
  done

  if ! __git_activity_date today; then
    ret=1
    'builtin' 'printf' "Missing dependency GNU \`date\`. Installing \`coreutils\` may be the solution. Installation method differs by OS.\\n"
  fi

  return "$ret"
}

__git_activity_date() {
  echo $('command' 'date' "$date_format" -d "$1" 2>/dev/null || 'command' 'gdate' "$date_format" -d "$1" 2>/dev/null)
  return "$?"
}

__git_activity_git_dir() {
  if [[ -d .git ]]; then
    echo ".git"
    return
  fi
  
  git rev-parse --git-dir 2>/dev/null
}

__git_activity_install() {
  local -i global
  local -A hook_cmds
  local hooks_dir template_dir

  global=0

  if (( $# > 1 )); then
    'builtin' 'shift'
    'builtin' 'printf' "Unsupported option \`%s\`\\n" "$*"
    return 3
  fi

  if [[ "$1" == "--global" ]]; then
    global=1
  elif (( $# )); then
    'builtin' 'printf' "Unsupported option \`%s\`\\n" "$*"
    return 3
  fi

  hook_cmds=(
    ["post-checkout"]='git activity record-post-checkout "$@"'
    ["post-commit"]="git activity record commit"
    ["post-merge"]="git activity record merge"
    ["pre-push"]="git activity record push"
    ["post-rewrite"]="git activity record rewrite"
  )

  if (( global )); then
    template_dir=$('command' 'git' config --global init.templatedir)

    [[ -z $template_dir ]] && {
      template_dir=$HOME/.config
      [[ -n "$XDG_CONFIG_HOME" ]] && template_dir=${XDG_CONFIG_HOME%/}
      template_dir+="/git-templates"

      'command' 'git' config --global init.templatedir $template_dir
      'builtin' 'printf' "Configured the global \`git init\` template directory to be %s" "$template_dir"
    }

    template_dir=$('builtin' 'echo' "echo $template_dir" | 'command' 'bash')
  else

    template_dir=$(__git_activity_git_dir)
    if [[ -z "$template_dir" ]]; then
      # DUPE
      'builtin' 'printf' "Not in a Git repo\\n"
      return 4
    fi
  fi
  
  hooks_dir=${template_dir}/hooks

  if ! [[ -d "$hooks_dir" ]]; then
    'command' 'mkdir' -p "$hooks_dir"
  fi

  for hook in "${!hook_cmds[@]}"; do
    if [[ -f "${hooks_dir}/$hook" ]]; then
      # DUPE
      'builtin' 'printf' "\\n# Added by \`git activity install\`\\n# https://github.com/olets/git-activity\\n" >> "${hooks_dir}/$hook"

      'builtin' 'printf' "%s\\n" "${hook_cmds[$hook]}" >> "${hooks_dir}/$hook"
      'builtin' 'printf' "Appended to %s hook in %s\\n" "$hook" "$hooks_dir"
    else
      'command' 'touch' "${hooks_dir}/$hook"
      'command' 'chmod' +x "${hooks_dir}/$hook"

      'builtin' 'printf' "#!/usr/bin/env bash\\n" >> "${hooks_dir}/$hook"

      # DUPE
      'builtin' 'printf' "\\n# Added by \`git activity install\`\\n# https://github.com/olets/git-activity\\n" >> "${hooks_dir}/$hook"

      'builtin' 'printf' "%s\\n" "${hook_cmds[$hook]}" >> "${hooks_dir}/$hook"
      'builtin' 'printf' "Created %s hook in %s\\n" "$hook" "$hooks_dir"
    fi
  done
}

__git_activity_record_post_checkout() {
  # N.B: means `git switch -c new && git checkout - && git switch -c new`
  #  only registers the first creation

  if ! __git_activity_git_dir &>/dev/null; then
    # DUPE
    'builtin' 'printf' "Not in a Git repo\\n"
    return 4
  fi

  local first_appearance_in_reflog no_tracking_branch

  first_appearance_in_reflog=false
  no_tracking_branch=false
  
  # For backwards compatability with the author's previous system
  if [[ "$4" == "force" ]]; then
    __git_activity_record create
    return
  fi

  if (( "$#" < 3 )); then
    return
  fi

  if (( "$3" == 0 )); then
    return
  fi

  if (( "$('command' 'git' reflog | grep -o "$('command' 'git' rev-parse --abbrev-ref @)" | 'command' 'wc' -l)" == 1 )); then
    first_appearance_in_reflog=true
  fi

  if [[ -z "$('command' 'git' rev-parse @{u} 2>/dev/null)" ]]; then
    no_tracking_branch=true
  fi

  if $first_appearance_in_reflog && $no_tracking_branch; then
    __git_activity_record create
  fi
}

__git_activity_record() {
  local commit_message branch date existing_content_without_headers log_message repo sha

  log_message="$*"

  if [[ -z $log_message ]]; then
    return
  fi
  
  branch=$('command' 'git' rev-parse --abbrev-ref HEAD)
  date=$('command' 'date' +"%Y-%m-%d %H:%M:%S %z") # YYYY-MM-DD HH:MM:SS [UTC offset]
  commit_message=$('command' 'git' log -1 --pretty=%s)
  repo=$('command' 'basename' "$('command' 'git' rev-parse --show-toplevel)") # note this uses the *local* name. to use the remote name, use $(basename -s .git "$(git config --get remote.origin.url)")
  sha=$('command' 'git' rev-parse --short HEAD)

  'builtin' 'printf' "$date	$log_message	$repo	$branch	$commit_message	$sha\\n" >> "$GIT_ACTIVITY_LOG_FILE"

  'builtin' 'printf' "git-activity: '%s' recorded\\n" "$log_message"
}

__git_activity_show() {
  local date_format log_date results results_key tmp_csv tmp_dir value
  local -A filters
  local -i has_filters

  date_format="+%Y-%m-%d"
  results_key="DATE	LOG MESSAGE	REPO	BRANCH	COMMIT MESSAGE	SHA"
  has_filters=$#
  filters=(
    ["date"]=""
    ["log_message"]=""
    ["repo"]=""
    ["branch"]=""
    ["commit_message"]=""
    ["sha"]=""
  )

  while (( $# )); do
    value=

    case "$1" in
      --date=*)
        value="${1:7}"

        # DUPE
        filters["date"]=$(__git_activity_date "$value")
        if (( "$?" )); then
          'builtin' 'printf' "Error: invalid date: '%s'\\nMore more info, see \`gdate\`.\\n" "$value"
          return
        fi
        'builtin' 'shift'
        ;;
      --date|\
      --date-pattern=*|\
      --date-pattern)
        _git_activity_api_error "--date=<date>"
        # exits
        ;;
      --log-message-pattern=*)
        value="${1:22}"
        filters["log_message"]="$value"
        'builtin' 'shift'
        ;;
      --log-message|\
      --log-message-pattern)
        _git_activity_api_error "--log-message-pattern=<pattern>"
        # exits
        ;;
      --repo-pattern=*)
        value="${1:15}"
        filters["repo"]="$value"
        'builtin' 'shift'
        ;;
      --repo|\
      --repo-pattern)
        _git_activity_api_error "--repo-pattern=<pattern>"
        # exits
        ;;
      --branch-pattern=*)
        value="${1:17}"
        filters["branch"]="$value"
        'builtin' 'shift'
        ;;
      --branch|\
      --branch-pattern)
        _git_activity_api_error "--branch-pattern=<pattern>"
        # exits
        ;;
      --commit-message-pattern=*)
        value="${1:25}"
        filters["commit_message"]="$value"
        'builtin' 'shift'
        ;;
      --commit-message|\
      --commit-message-pattern)
        _git_activity_api_error "--commit-message-pattern=<pattern>"
        # exits
        ;;
      --sha-pattern=*)
        value="${1:14}"
        filters["sha"]="$value"
        'builtin' 'shift'
        ;;
      --sha|\
      --sha-pattern)
        _git_activity_api_error "--sha-pattern=<pattern>"
        # exits
        ;;
      -*)
        'builtin' 'printf' "Unsupported option \`%s\`\\n" "$1"
        return 3
        ;;
      *)
        value="$1"

        # DUPE
        filters["date"]=$(__git_activity_date "$value")
        if (( "$?" )); then
          'builtin' 'printf' "Error: invalid date: '%s'\\nMore more info, see \`gdate\`.\\n" "$value"
          return
        fi
        'builtin' 'shift'
        ;;
    esac
  done


  tmp_dir="${TMPDIR:-/tmp}"
  tmp_dir="${tmp_dir%/}/git-activity/"
  [[ -d "$tmp_dir" ]] || mkdir -p "$tmp_dir"

  tmp_csv=$(mktemp "${tmp_dir}".csv.XXXXXX)

  results=$('command' 'tac' "$GIT_ACTIVITY_LOG_FILE")

  (( has_filters )) && results=$(echo "$results" | 'command' 'awk' -F'\t' \
    -v date_pattern="^${filters[date]}" \
    -v log_message_pattern="${filters[log_message]}" \
    -v repo_pattern="${filters[repo]}" \
    -v branch_pattern="${filters[branch]}" \
    -v commit_message_pattern="${filters[commit_message]}" \
    -v sha_pattern="${filters[sha]}" \
    '$1~date_pattern && $2~log_message_pattern && $3~repo_pattern && $4~branch_pattern && $5~commit_message_pattern && $6~sha_pattern'
  )
    
  [[ -z "$results" ]] && return

  # Append the header
  'builtin' 'printf' "%s\\n" "$results_key" >> "$tmp_csv"
  # Append the results
  'builtin' 'printf' "%s\\n" "$results" >> "$tmp_csv"
  # Append the footer
  'builtin' 'printf' "%s\\n" "$results_key" >> "$tmp_csv"

  'command' 'cat' "$tmp_csv" | \
    # Present in columns, delimited by tabs
    'command' 'column' -ts '	' | \
    # Number lines starting with zero
    'command' 'nl' -v 0 | \
    # Use the pager, with numbered lines, ctrl-c closes, no bell, horizontal overflow
    'command' 'less' -KQS

  'command' 'rm' "$tmp_csv"
}

_git_activity_api_error() {
  'builtin' 'printf' "Unsupported option. Did you mean \`%s\`?\\n" "$1"
  exit
}

__git_activity_version() {
  'builtin' 'printf' "1.1.1\\n"
}

main() {
  local csv_dir source_dir

  source_dir=$('command' 'dirname' -- "${BASH_SOURCE[0]}")

  ! __git_activity_check_dependencies && return
  
  if ! [[ -f "$GIT_ACTIVITY_LOG_FILE" ]]; then
    csv_dir=$('command' 'dirname' -- "$GIT_ACTIVITY_LOG_FILE")

    [[ -d "$csv_dir" ]] || mkdir -p "$csv_dir"

    'command' 'touch' "$GIT_ACTIVITY_LOG_FILE"
  fi

  if (( ! $# )); then
    'builtin' 'printf' "Error: Specify a subcommand.\\n"
    return 2
  fi

  case "$1" in
    --help|\
    help)
      'command' 'man' git-activity 2>/dev/null || 'command' 'man' "${source_dir}/man/man1/git-activity.1"
      return
      ;;
    install)
      'builtin' 'shift'
      __git_activity_install "$@"
      return
      ;;
    record)
      'builtin' 'shift'
      __git_activity_record "$@"
      return
      ;;
    record-post-checkout)
      'builtin' 'shift'
      __git_activity_record_post_checkout "$@"
      return
      ;;
    show)
      'builtin' 'shift'
      __git_activity_show "$@"
      return
      ;;
    --version|\
    -v)
      __git_activity_version
      return
      ;;
    --date|\
    --date-pattern=*|\
    --date-pattern)
      _git_activity_api_error "show --date=<date>"
      # exits
      ;;
    --log-message|\
    --log-message-pattern=*|\
    --log-message-pattern)
      _git_activity_api_error "show --log-message-pattern=<pattern>"
      # exits
      ;;
    --repo|\
    --repo-pattern=*|\
    --repo-pattern)
      _git_activity_api_error "show --repo-pattern=<pattern>"
      # exits
      ;;
    --branch|\
    --branch-pattern=*|\
    --branch-pattern)
      _git_activity_api_error "show --branch-pattern=<pattern>"
      # exits
      ;;
    --commit-message|\
    --commit-message-pattern=*|\
    --commit-message-pattern)
      _git_activity_api_error "show --commit-message-pattern=<pattern>"
      # exits
      ;;
    --sha-pattern|\
    --sha-pattern-pattern=*|\
    --sha-pattern-pattern)
      _git_activity_api_error "show --sha-pattern-pattern=<pattern>"
      # exits
      ;;
    *)
      'builtin' 'printf' "Error: Unsupported option \`%s\`\\n" "$1"
      return 1
      ;;
  esac
}

main "$@"
