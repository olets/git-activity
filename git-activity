#!/usr/bin/env bash

# git-activity
# https://github.com/olets/git-activity
# Copyright (Â©) 2017-present Henry Bley-Vroman


'builtin' 'export' GIT_ACTIVITY_CSV_PATH="${GIT_ACTIVITY_CSV_PATH:-${XDG_CONFIG_HOME:-$HOME/.config}/git-activity/git-activity.csv}"

__git_activity_heading="DATE	LOG MESSAGE	REPO	BRANCH	COMMIT MESSAGE	SHA"

__git_activity_install() {
  local -A hook_cmds
  local hooks_dir template_dir

  hook_cmds=(
    ["post-checkout"]='git activity record-post-checkout "$@"'
    ["post-commit"]="git activity record commit"
    ["post-rewrite"]="git activity record rewrite"
    ["pre-push"]="git activity record push"
  )

  template_dir=$('command' 'git' config --global init.templatedir)
  
  [[ -z $template_dir ]] && {
    template_dir="${${XDG_CONFIG_HOME:+${XDG_CONFIG_HOME%/}}:-$HOME/.config}/git-templates"
    'command' 'git' config --global init.templatedir $template_dir
    'builtin' 'printf' "Configured the global \`git init\` template directory to be %s" "$template_dir"
  }

  template_dir=$('builtin' 'echo' "echo $template_dir" | 'command' 'bash')
  
  hooks_dir=${template_dir}/hooks

  if ! [[ -d "$hooks_dir" ]]; then
    'command' 'mkdir' -p "$hooks_dir"
  fi

  for hook in "${!hook_cmds[@]}"; do
    'command' 'touch' "${hooks_dir}/$hook"
    'command' 'chmod' +x "${hooks_dir}/$hook"
    'builtin' 'echo' "${hook_cmds[$hook]}" >> "${hooks_dir}/$hook"
  done

  'builtin' 'printf' "Added hooks in %s\\n" "$hooks_dir"
}

__git_activity_record_post_checkout() {
  # N.B: means `git switch -c new && git checkout - && git switch -c new`
  #  only registers the first creation

  local first_appearance_in_reflog no_tracking_branch

  first_appearance_in_reflog=false
  no_tracking_branch=false

  if (( "$#" != 3 )); then
    return
  fi

  if (( "$3" == 0 )); then
    return
  fi

  if (( "$('command' 'git' reflog | grep -o "$('command' 'git' rev-parse --abbrev-ref @)" | 'command' 'wc' -l)" == 1 )); then
    first_appearance_in_reflog=true
  fi

  if [[ -z "$('command' 'git' rev-parse @{u} 2>/dev/null)" ]]; then
    no_tracking_branch=true
  fi

  if $first_appearance_in_reflog && $no_tracking_branch; then
    __git_activity_record create
  fi
}

__git_activity_record() {
  local commit_message branch date existing_content_without_headers log_message repo sha

  log_message="$*"

  if [[ -z $log_message ]]; then
    return
  fi
  
  branch=$('command' 'git' rev-parse --abbrev-ref HEAD)
  date=$('command' 'date' +"%Y-%m-%d %H:%M:%S %z") # YYYY-MM-DD HH:MM:SS [UTC offset]
  commit_message=$('command' 'git' log -1 --pretty=%s)
  repo=$('command' 'basename' "$('command' 'git' rev-parse --show-toplevel)") # note this uses the *local* name. to use the remote name, use $(basename -s .git "$(git config --get remote.origin.url)")
  sha=$('command' 'git' rev-parse --short HEAD)

  'builtin' 'printf' "$date	$log_message	$repo	$branch	$commit_message	$sha\\n" >> "$GIT_ACTIVITY_CSV_PATH"

  'builtin' 'printf' "git-activity: \`%s\` recorded\\n" "$log_message"
}

__git_activity_show() {
  local date_format log_date tmp_csv tmp_dir value
  local -A filters
  local -i has_filters

  date_format="+%Y-%m-%d"

  has_filters=$#

  filters=(
    ["date"]=""
    ["log_message"]=""
    ["repo"]=""
    ["branch"]=""
    ["commit_message"]=""
    ["sha"]=""
  )

  while (( $# )); do
    value=

    case "$1" in
      --date=*)
        if ! $'command' -v gdate &>/dev/null; then
          'builtin' 'printf' "Requires \`gdate\`. Installation method varies by OS. It's distributed as part of \`coreutils\`.\\nAborting."
          return
        fi

        value="${1:7}"
        filters["date"]=$('command' 'gdate' "$date_format" -d "$value")
        'builtin' 'shift'
        ;;
      --log-message-pattern=*)
        value="${1:22}"
        filters["log_message"]="$value"
        'builtin' 'shift'
        ;;
      --repo-pattern=*)
        value="${1:15}"
        filters["repo"]="$value"
        'builtin' 'shift'
        ;;
      --branch-pattern=*)
        value="${1:17}"
        filters["branch"]="$value"
        'builtin' 'shift'
        ;;
      --commit-message-pattern=*)
        value="${1:25}"
        filters["commit_message"]="$value"
        'builtin' 'shift'
        ;;
      --sha-pattern=*)
        value="${1:14}"
        filters["sha"]="$value"
        'builtin' 'shift'
        ;;
      *)
        if ! $'command' -v gdate &>/dev/null; then
          'builtin' 'printf' "Requires \`gdate\`. Installation method varies by OS. It's distributed as part of \`coreutils\`.\\nAborting."
          return
        fi
        
        value="$1"
        filters["date"]=$('command' 'gdate' "$date_format" -d "$value")
        'builtin' 'shift'
        ;;
    esac
  done

  if (( ! has_filters )); then
    'command' 'cat' "$GIT_ACTIVITY_CSV_PATH" | \
      'command' 'column' -ts '	' | \
      'command' 'nl' -v 0 | \
      'command' 'less' -QS
    return
  fi

  tmp_dir="${TMPDIR:-/tmp}"
  tmp_dir="${tmp_dir%/}/git-activity/"
  [[ -d "$tmp_dir" ]] || mkdir -p "$tmp_dir"

  tmp_csv=$(mktemp ${tmp_dir}1.csv.XXXXXX)

  local results

  results=$('command' 'cat' "$GIT_ACTIVITY_CSV_PATH" | 'command' 'awk' -F'\t' \
    -v date_pattern="^${filters[date]}" \
    -v log_message_pattern="${filters[log_message]}" \
    -v repo_pattern="${filters[repo]}" \
    -v branch_pattern="${filters[branch]}" \
    -v commit_message_pattern="${filters[commit_message]}" \
    -v sha_pattern="${filters[sha]}" \
    '$1~date_pattern && $2~log_message_pattern && $3~repo_pattern && $4~branch_pattern && $5~commit_message_pattern && $6~sha_pattern' \
    )
    
  if [[ -z "$results" ]]; then
    'builtin' 'printf' "No matching Git activity recorded %s\\n" "$*"
    return
  fi

  # Append the header
  'builtin' 'printf' "%s\\n" "$__git_activity_heading" >> "$tmp_csv"
  # Append the results
  'builtin' 'printf' "%s\\n" "$results" >> "$tmp_csv"
  # Append the footer
  'builtin' 'printf' "%s\\n" "$__git_activity_heading" >> "$tmp_csv"

  'command' 'cat' "$tmp_csv" | \
    # Present in columns, delimited by tabs
    'command' 'column' -ts '	' | \
    # Number lines starting with zero
    'command' 'nl' -v 0 | \
    # Use the pager
    'command' 'less' -QS

  'command' 'rm' "$tmp_csv"
}

__git_activity_version() {
  'builtin' 'printf' "1.0.0-beta.1\\n"
}

main() {
  local csv_dir source_dir

  source_dir=$('command' 'dirname' -- "${BASH_SOURCE[0]}")
  
  if ! [[ -f "$GIT_ACTIVITY_CSV_PATH" ]]; then
    csv_dir=$('command' 'dirname' -- "$GIT_ACTIVITY_CSV_PATH")

    [[ -d "$csv_dir" ]] || mkdir -p "$csv_dir"

    'command' 'touch' "$GIT_ACTIVITY_CSV_PATH"

    'builtin' 'echo' "$__git_activity_heading" > "$GIT_ACTIVITY_CSV_PATH"
  fi

  case "$1" in
    --help|\
    help)
      'command' 'man' git-activity 2>/dev/null || 'command' 'man' ${source_dir}/man/man1/git-activity.1
      return
      ;;
    install)
      __git_activity_install
      return
      ;;
    record)
      'builtin' 'shift'
      __git_activity_record "$@"
      return
      ;;
    record-post-checkout)
      'builtin' 'shift'
      __git_activity_record_post_checkout "$@"
      return
      ;;
    show)
      'builtin' 'shift'
      __git_activity_show "$@"
      return
      ;;
    --version|\
    -v)
      __git_activity_version
      return
      ;;
    *)
      'builtin' 'printf' "Unsupported option %s\\n" "$1"
      return 1
      ;;
  esac
}

main "$@"
