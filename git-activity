#!/usr/bin/env bash

# git-activity
# https://github.com/olets/git-activity
# Copyright (Â©) 2017-present Henry Bley-Vroman


'builtin' 'export' GIT_ACTIVITY_CSV_PATH="${GIT_ACTIVITY_CSV_PATH:-${XDG_CONFIG_HOME:-$HOME/.config}/git-activity/git-activity.csv}"

__git_activity_heading="DATE	LOG MESSAGE	REPO	BRANCH	COMMIT MESSAGE	SHA"

__git_activity_install() {
  local -A hook_cmds
  local hooks_dir template_dir

  hook_cmds=(
    ["post-checkout"]='git activity record-post-checkout "$@"'
    ["post-commit"]="git activity record commit"
    ["post-rewrite"]="git activity record rewrite"
    ["pre-push"]="git activity record push"
  )

  template_dir=$('command' 'git' config --global init.templatedir)
  
  [[ -z $template_dir ]] && {
    template_dir="${${XDG_CONFIG_HOME:+${XDG_CONFIG_HOME%/}}:-$HOME/.config}/git-templates"
    'command' 'git' config --global init.templatedir $template_dir
    'builtin' 'printf' "Configured the global \`git init\` template directory to be %s" "$template_dir"
  }

  template_dir=$('builtin' 'echo' "echo $template_dir" | 'command' 'bash')
  
  hooks_dir=${template_dir}/hooks

  if ! [[ -d "$hooks_dir" ]]; then
    'command' 'mkdir' -p "$hooks_dir"
  fi

  for hook in "${!hook_cmds[@]}"; do
    'command' 'touch' "${hooks_dir}/$hook"
    'command' 'chmod' +x "${hooks_dir}/$hook"
    'builtin' 'echo' "${hook_cmds[$hook]}" >> "${hooks_dir}/$hook"
  done

  'builtin' 'printf' "Added hooks in %s\\n" "$hooks_dir"
}

__git_activity_record_post_checkout() {
  # N.B: means `git switch -c new && git checkout - && git switch -c new`
  #  only registers the first creation

  local first_appearance_in_reflog no_tracking_branch

  first_appearance_in_reflog=false
  no_tracking_branch=false

  if (( "$#" != 3 )); then
    return
  fi

  if (( "$3" == 0 )); then
    return
  fi

  if (( "$('command' 'git' reflog | grep -o "$('command' 'git' rev-parse --abbrev-ref @)" | 'command' 'wc' -l)" == 1 )); then
    first_appearance_in_reflog=true
  fi

  if [[ -z "$('command' 'git' rev-parse @{u} 2>/dev/null)" ]]; then
    no_tracking_branch=true
  fi

  if $first_appearance_in_reflog && $no_tracking_branch; then
    __git_activity_record create
  fi
}

__git_activity_record() {
  local commit_message branch date existing_content_without_headers log_message repo sha

  log_message="$*"

  if [[ -z $log_message ]]; then
    return
  fi
  
  branch=$('command' 'git' rev-parse --abbrev-ref HEAD)
  date=$('command' 'date' +"%Y-%m-%d %H:%M:%S %z") # YYYY-MM-DD HH:MM:SS [UTC offset]
  commit_message=$('command' 'git' log -1 --pretty=%s)
  repo=$('command' 'basename' "$('command' 'git' rev-parse --show-toplevel)") # note this uses the *local* name. to use the remote name, use $(basename -s .git "$(git config --get remote.origin.url)")
  sha=$('command' 'git' rev-parse --short HEAD)

  existing_content_without_headers=$('command' 'tail' -n +2 "$GIT_ACTIVITY_CSV_PATH" | 'command' 'tail' -r | 'command' 'tail' -n +2 | 'command' 'tail' -r)

  'builtin' 'printf' "$__git_activity_heading\\n" > "$GIT_ACTIVITY_CSV_PATH"
  'builtin' 'printf' "$date	$log_message	$repo	$branch	$commit_message	$sha\\n" >> "$GIT_ACTIVITY_CSV_PATH"
  'builtin' 'printf' "$existing_content_without_headers\\n" >> "$GIT_ACTIVITY_CSV_PATH"
  'builtin' 'printf' "$__git_activity_heading\\n" >> "$GIT_ACTIVITY_CSV_PATH"
  'builtin' 'printf' "git-activity: \`%s\` recorded\\n" "$log_message"
}

__git_activity_show() {
  local date_format

  date_format="+%Y-%m-%d"

  if [[ "$1" == "all" ]]; then
    log_date=2
  elif [[ -n "$*" ]]; then
    log_date=$(gdate "$date_format" -d "$*")
  else
    log_date=$(gdate "$date_format")
  fi

  activity=$(grep ^"$log_date" "$GIT_ACTIVITY_CSV_PATH")

  if [[ -n "$activity" ]]; then
    'command' 'grep' -E "^($log_date|DATE)" "$GIT_ACTIVITY_CSV_PATH" | tail -r | column -ts '	' | nl -v 0 | less -QS
  else
    'builtin' 'printf' "No git activity recorded %s\\n" "$*"
  fi
}

__git_activity_version() {
  'builtin' 'printf' "1.0.0-beta.1\\n"
}

main() {
  local source_dir
  
  if ! [[ -f "$GIT_ACTIVITY_CSV_PATH" ]]; then
    'command' 'touch' "$GIT_ACTIVITY_CSV_PATH"
    'builtin' 'echo' "$__git_activity_heading" > "$GIT_ACTIVITY_CSV_PATH"
  fi

  source_dir=$(dirname -- "${BASH_SOURCE[0]}")

  while (( $# )); do
    case "$1" in
      --help|\
      help)
        'command' 'man' git-activity 2>/dev/null || 'command' 'man' ${source_dir}/man/man1/git-activity.1
        return
        ;;
      install)
        __git_activity_install
        return
        ;;
      record)
        'builtin' 'shift'
        __git_activity_record "$@"
        return
        ;;
      record-post-checkout)
        'builtin' 'shift'
        __git_activity_record_post_checkout "$@"
        return
        ;;
      show)
        'builtin' 'shift'
        __git_activity_show "$@"
        return
        ;;
      --version|\
      -v)
        __git_activity_version
        return
        ;;
      *)
        'builtin' 'printf' "Unsupported option %s\\n" "$1"
        return 1
        ;;
    esac
  done
}

main "$@"
