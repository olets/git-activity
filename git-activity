#!/usr/bin/env bash

# git-activity
# https://github.com/olets/git-activity
# Copyright (Â©) 2017-present Henry Bley-Vroman


'builtin' 'export' GIT_ACTIVITY_LOG_PATH="${GIT_ACTIVITY_LOG_PATH:-${XDG_CONFIG_HOME:-$HOME/.config}/git-activity/git-activity.csv}"

__git_activity_heading="DATE\\tREPO\\tBRANCH\\tCOMMIT MESSAGE\\tSHA\\tACTIVITY"

__git_activity_postcheckout() {
  # N.B: means `git switch -c new && git checkout - && git switch -c new`
  #  only registers the first creation

  local first_appearance_in_reflog no_tracking_branch

  first_appearance_in_reflog=false
  no_tracking_branch=false

  if (( "$#" != 3 )); then
    return
  fi

  if (( "$3" == 0 )); then
    return
  fi

  if (( "$('command' 'git' reflog | grep -o "$('command' 'git' rev-parse --abbrev-ref @)" | 'command' 'wc' -l)" == 1 )); then
    first_appearance_in_reflog=true
  fi

  if [[ -z "$('command' 'git' rev-parse @{u} 2>/dev/null)" ]]; then
    no_tracking_branch=true
  fi

  if $first_appearance_in_reflog && $no_tracking_branch; then
    __git_activity_record create
  fi
}

__git_activity_record() {
  local activity branch date existing_content_without_headers message repo sha

  activity="$*"

  if [[ -z $activity ]]; then
    return
  fi
  
  branch=$('command' 'git' rev-parse --abbrev-ref HEAD)
  date=$('command' 'date' +"%Y-%m-%d %H:%M:%S %z") # YYYY-MM-DD HH:MM:SS [UTC offset]
  message=$('command' 'git' log -1 --pretty=%s)
  repo=$('command' 'basename' "$('command' 'git' rev-parse --show-toplevel)") # note this uses the *local* name. to use the remote name, use $(basename -s .git "$(git config --get remote.origin.url)")
  sha=$('command' 'git' rev-parse --short HEAD)

  existing_content_without_headers=$('command' 'tail' -n +2 "$GIT_ACTIVITY_LOG_PATH" | 'command' 'tail' -r | 'command' 'tail' -n +2 | 'command' 'tail' -r)

  'builtin' 'printf' "$__git_activity_heading\\n" > "$GIT_ACTIVITY_LOG_PATH"
  'builtin' 'printf' "$date\\t$repo \\t$branch\\t$message\\t$sha\\t$activity\\n" >> "$GIT_ACTIVITY_LOG_PATH"
  'builtin' 'printf' "$existing_content_without_headers\\n" >> "$GIT_ACTIVITY_LOG_PATH"
  'builtin' 'printf' "$__git_activity_heading\\n" >> "$GIT_ACTIVITY_LOG_PATH"
  'builtin' 'printf' "Git activity log: %s recorded\\n" "$activity"
}

__git_activity_show() {
  local date_format

  date_format="+%Y-%m-%d"

  if [[ "$1" == "all" ]]; then
    log_date=2
  elif [[ -n "$*" ]]; then
    log_date=$(gdate "$date_format" -d "$*")
  else
    log_date=$(gdate "$date_format")
  fi

  activity=$(grep ^"$log_date" "$GIT_ACTIVITY_LOG_PATH")

  if [[ -n "$activity" ]]; then
    'command' 'grep' -E "^($log_date|DATE)" "$GIT_ACTIVITY_LOG_PATH" | tail -r | column -ts '	' | nl -v 0 | less -QS
  else
    'builtin' 'printf' "No git activity recorded %s\\n" "$*"
  fi
}

__git_activity_version() {
  'builtin' 'printf' "1.0.0-beta.1\\n"
}

main() {
  if ! [[ -f "$GIT_ACTIVITY_LOG_PATH" ]]; then
    'command' 'touch' "$GIT_ACTIVITY_LOG_PATH"
    'builtin' 'echo' "$__git_activity_heading" > "$GIT_ACTIVITY_LOG_PATH"
  fi

  case $1 in
    post-checkout)
      'builtin' 'shift'
      __git_activity_postcheckout "$@"
      ;;
    record)
      'builtin' 'shift'
      __git_activity_record "$@"
      ;;
    show)
      'builtin' 'shift'
      __git_activity_show "$@"
      ;;
    --version|\
    -v)
      'builtin' 'shift'
      __git_activity_version
      ;;
    *)
      'builtin' 'printf' "Unsupported option %s\\n" "$1"
      return 3
      ;;
  esac
}

main "$@"
